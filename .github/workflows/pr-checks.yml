name: Pull Request Checks

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  statuses: write

jobs:
  quality-gate:
    name: 🛡️ Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Type check
        run: npm run type-check

      - name: 💄 Check code formatting
        run: npm run format:check

      - name: 🔧 Run linting
        run: npm run lint

      - name: 🧪 Run tests with coverage
        run: npm run test:ci

      - name: 🏗️ Test build
        run: npm run build

      - name: 📊 Generate and comment coverage report
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            // Generate coverage report
            let coverageContent = '';
            let testSummary = '';
            try {
              const testOutput = execSync('npm run test:ci -- --verbose', { encoding: 'utf8' });
              
              // Extract test summary
              const testLines = testOutput.split('\n');
              const summaryLines = testLines.filter(line => 
                line.includes('Test Suites:') || 
                line.includes('Tests:') || 
                line.includes('Snapshots:') ||
                line.includes('Time:')
              );
              testSummary = summaryLines.join('\n');
              
              // Extract coverage
              const coverageLines = testOutput.split('\n');
              const summaryIndex = coverageLines.findIndex(line => line.includes('Coverage summary') || line.includes('All files'));
              if (summaryIndex !== -1) {
                const endIndex = coverageLines.findIndex((line, index) => 
                  index > summaryIndex && (line.includes('Test Suites:') || line.trim() === '')
                );
                coverageContent = coverageLines.slice(summaryIndex, endIndex > -1 ? endIndex : summaryIndex + 10).join('\n');
              }
            } catch (error) {
              console.error('Error generating coverage:', error);
              coverageContent = 'Coverage report generation failed';
              testSummary = 'Test summary unavailable';
            }

            // Determine overall status
            const allJobsPassed = '${{ job.status }}' === 'success';
            const statusEmoji = allJobsPassed ? '✅' : '❌';
            const statusText = allJobsPassed ? 'All checks passed!' : 'Some checks failed';

            // Create PR comment
            const comment = `## ${statusEmoji} Quality Gate Report

            ### 🧪 Test Results
            \`\`\`
            ${testSummary}
            \`\`\`

            ### 📊 Coverage Report
            \`\`\`
            ${coverageContent}
            \`\`\`

            ### 🎯 Quality Checks Status
            ${allJobsPassed ? '✅ All quality checks passed successfully!' : '❌ Some quality checks failed - see workflow details above'}

            **Overall Status: ${statusText}**

            ---
            <sub>🤖 Generated automatically by [GitHub Actions](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})</sub>`;

            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.body.includes('Quality Gate Report') && 
              (comment.user.type === 'Bot' || comment.user.login === 'github-actions[bot]')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: 🎯 Set final status check
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? 'success' : 'failure';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: status,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: status === 'success' ? 'All quality checks passed' : 'Quality checks failed',
              context: 'ci/quality-gate'
            });
