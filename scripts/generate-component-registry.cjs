/**
 * Generate component registry by reading the components folder structure
 * This script runs at build time to create a dynamic registry
 */

const fs = require('fs');
const path = require('path');

const componentsDir = path.join(__dirname, '../src/components');
const registryFile = path.join(componentsDir, 'registry.ts');

// Read all component folder names
const getComponentNames = () => {
  try {
    return fs
      .readdirSync(componentsDir)
      .filter(item => {
        const fullPath = path.join(componentsDir, item);
        // Only include directories, exclude files like registry.ts
        return fs.statSync(fullPath).isDirectory();
      })
      .sort(); // Sort alphabetically for consistency
  } catch (error) {
    console.warn('Could not read components directory:', error);
    return ['Button', 'Icon']; // Fallback
  }
};

const componentNames = getComponentNames();

// Generate the registry file content
const registryContent = `// Central registry of all components in the library
// This file is auto-generated by scripts/generate-component-registry.js
// DO NOT EDIT MANUALLY - it will be overwritten!

export const COMPONENT_NAMES = [
${componentNames.map(name => `  '${name}',`).join('\n')}
] as const;

export type ComponentName = (typeof COMPONENT_NAMES)[number];

// Auto-generated on: ${new Date().toISOString()}
// Found components: ${componentNames.join(', ')}
`;

// Write the registry file
fs.writeFileSync(registryFile, registryContent, 'utf8');

console.log('✅ Component registry generated successfully!');
console.log(
  `📁 Found ${componentNames.length} components: ${componentNames.join(', ')}`
);
console.log(`📝 Registry written to: ${registryFile}`);
